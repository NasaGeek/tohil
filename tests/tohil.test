if {[lsearch [namespace children] ::tcltest] == -1} {
	package require tcltest
	namespace import ::tcltest::*
}

package require tohil

# =========
# tohil::eval
# =========
test tohil_eval-1.1 {incorrect usage of eval -- not enough arguments} {
	list [catch {tohil::eval} errMsg] $errMsg
} {1 {wrong # args: should be "tohil::eval evalString"}}

test tohil_eval-1.2 {incorrect usage of eval -- too many arguments} {
	list [catch {tohil::eval 1 2} errMsg] $errMsg
} {1 {wrong # args: should be "tohil::eval evalString"}}

test tohil_eval-1.3 {correct usage of eval} {
	list [catch {tohil::eval "5 + 5"} errMsg] $errMsg
} {0 10}

test tohil_eval-1.4 {incorrect usage of eval} {
	list [catch {tohil::eval "a = 5"} errMsg] $errMsg
} {1 {invalid syntax (tohil, line 1)}}

# =========
# tohil::exec
# =========
test tohil_exec-1.1 {incorrect usage of exec -- not enough arguments} {
	list [catch {tohil::exec} errMsg] $errMsg
} {1 {wrong # args: should be "tohil::exec execString"}}

test tohil_exec-1.2 {incorrect usage of exec -- too many arguments} {
	list [catch {tohil::exec 1 2} errMsg] $errMsg
} {1 {wrong # args: should be "tohil::exec execString"}}

test tohil_exec-1.3 {correct usage of exec} {
	list [catch {tohil::exec "a = 5"} errMsg] $errMsg
} {0 {}}

test tohil_exec-1.4 {incorrect usage of exec} {
	list [catch {tohil::exec "a = nosuchvar"} errMsg] $errMsg
} {1 {name 'nosuchvar' is not defined}}

# =========
# tohil::import
# =========
test tohil_import-1.1 {incorrect import usage} {
	list [catch {tohil::import} errMsg1] $errMsg1\
	     [catch {tohil::import -from os} errMsg2] $errMsg2
} {1 {wrong # args: should be "tohil::import module"}\
   1 {wrong # args: should be "tohil::import module"}}

test tohil_import-1.2 {basic import} -body {
	tohil::import re
	tohil::exec "import sys; assert 're' in sys.modules; assert 're' in globals()"
} -result {}

test tohil_import-1.3 {submodule import} -body {
	tohil::import xml.dom
	tohil::exec "assert 'dom' in dir(xml)"
} -result {}

test tohil_import-1.4 {non-existent import} -body {
	list [catch {tohil::import aosidas} err] $err
} -result {1 {No module named 'aosidas'}}

test tohil_import-1.5 {non-existent import with full trace} -body {
	proc aaa {} {
		tohil::import aosidas
	}
	list [catch {aaa} err] $err $::errorInfo
} -result {1 {No module named 'aosidas'} {No module named 'aosidas'
from python code executed by tohil
    invoked from within
"tohil::import aosidas"
    (procedure "aaa" line 2)
    invoked from within
"aaa"}}

# =========
# tohil::call
# =========
test tohil_call-1.1 {incorrect call usage} {
	list [catch {tohil::call} errMsg1] $errMsg1
} {1 {wrong # args: should be "tohil::call ?-kwlist list? func ?arg ...?"}}

test tohil_call-1.2 {basic call} {
	tohil::exec {def a(): return 5**2}
	tohil::call a
} {25}

test tohil_call-1.3 {basic call with args} {
	tohil::exec {def a(x,y): return x+y}
	tohil::call a string1 string2
} {string1string2}

test tohil_call-1.4 {call of module function} {
	tohil::import base64
	tohil::call base64.b64decode YXRlc3Q=
} {atest}

test tohil_call-1.5 {call of object methods} {
	tohil::import io
	tohil::exec {a = io.StringIO(); a.write('btest'); a.seek(0)}
	tohil::call a.read
} {btest}

test tohil_call-1.6 {simple call exception} {
	tohil::exec {a = lambda: 1/0}
	list [catch {tohil::call a} err] $err
} {1 {division by zero}}

test tohil_call-1.7 {stacked call exception} {
	tohil::exec {def a(): return 5 + dict()}
	tohil::exec {def b(): return a()}
	tohil::exec {def c(): return b()}
	proc d {} {tohil::call c}
	proc e {} {d}
	list [catch {e} err] $err $::errorInfo
} {1 {TypeError: unsupported operand type(s) for +: 'int' and 'dict'
  File "<string>", line 1, in a
  File "<string>", line 1, in b
  File "<string>", line 1, in c
----- tcl -> tohilthon interface -----} {TypeError: unsupported operand type(s) for +: 'int' and 'dict'
  File "<string>", line 1, in a
  File "<string>", line 1, in b
  File "<string>", line 1, in c
----- tcl -> tohilthon interface -----
    while executing
"tohil call c"
    (procedure "d" line 1)
    invoked from within
"d"
    (procedure "e" line 1)
    invoked from within
"e"}}

# TODO: this error message is terrible
test tohil_call-1.8 {call of nonexistent functions} {
	list [catch {tohil call aosdin} err] $err
} {1 {AttributeError: module '__main__' has no attribute 'aosdin'
----- tcl -> tohilthon interface -----}}

# TODO: this error message could be improved ("has no method")
test tohil_call-1.9 {call of nonexistent object methods} {
	tohil eval {a = "aaa"}
	list [catch {tohil call a.aosdin} err] $err
} {1 {AttributeError: 'str' object has no attribute 'aosdin'
----- tcl -> tohilthon interface -----}}

# =========
# TYPES
# =========
test types-1.1 {return True} {
	tohil::exec {def a(): return True}
	tohil::call a
} {1}

test types-1.2 {return False} {
	tohil::exec {def a(): return False}
	tohil::call a
} {0}

test types-1.3 {return None} {
	tohil::exec {def a(): return None}
	tohil::call a
} {}

test types-1.4 {return null byte} {
	tohil::exec {def a(): return '\0'}
	set a [tohil::call a]
	list [string length $a] [expr {$a == "\0"}]
} {1 1}

# See gotcha 1 for explanation of roundabout way of getting a unicode object.
test types-1.5 {return unicode object} {
	tohil::exec {def a(): return b'\xe0\xb2\xa0'.decode('utf-8')}
	expr {[tohil::call a] == "à² "}
} {1}

test types-1.6 {return literal bytes} {
	tohil::exec {def a(): return '\xe0\xb2\xa0'}
	expr {[tohil::call a] == "\xe0\xb2\xa0"}
} {1}

test types-1.7 {return nested lists and dictionaries} {
	tohil::exec {def a(): return [
			(1,2),
			[u"a",["b",7]],
			{"x":[(3,4),{'a':{'b':'c'}}],"y":(4,5,6)}]}
	set a [tohil::call a]
	set ad [lindex $a 2]
	set ada [lindex [dict get $ad x] 1]
	list \
		[lindex $a 0] [lindex $a 1] [lindex [dict get $ad x] 0]\
		[dict get $ad y] [dict get [dict get $ada a] b]
} {{1 2} {a {b 7}} {3 4} {4 5 6} c}

test types-1.8 {return float} {
	tohil::exec {def a(): return 1.0/3}
	tohil::call a
} {0.3333333333333333}

test types-1.9 {return large integer} {
	tohil::exec {def a(): return 3 << 5000}
	expr {[tohil::call a] == 3 << 5000}
} {1}

# =========
# MODULES
# =========
test modules-1.1 {hashlib module} {
	tohil::import hashlib
	tohil::exec {def a(): return hashlib.sha1('password'.encode('utf8')).hexdigest()}
	tohil::call a
} {5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8}

test modules-1.2 {zlib module} {
	tohil::import zlib
	tohil::exec {def a(): return zlib.decompress(b'x\x9cKLL\x04\x00\x02I\x01$')}
	tohil::call a
} {aaa}

test modules-1.3 {datetime module} {
	tohil::import datetime
	tohil::exec {def a(): return datetime.datetime.utcfromtimestamp(0).isoformat()}
	tohil::call a
} {1970-01-01T00:00:00}

test module-1.4 {sqlite3 module} {
	tohil::import sqlite3
	tohil::exec {def a(): global b; b = sqlite3.connect(":memory:").cursor()}
	tohil::call a
	tohil::call b.execute "create table x(y integer)"
	tohil::call b.execute "insert into x values (1)"
	tohil::call b.execute "insert into x values (18)"
	tohil::call b.execute "select avg(y) from x"
	tohil::call b.fetchone
} {9.5}

# =========
# cleanup
# =========
::tcltest::cleanupTests
